{"version":3,"sources":["components/Search/index.jsx","components/Weather/index.jsx","api/axiosClient.js","api/weatherApi.js","App.js","reportWebVitals.js","index.js"],"names":["Search","props","onSubmit","typingTimeoutRef","useRef","useState","q","setQ","className","type","value","onChange","event","target","current","clearTimeout","setTimeout","placeholder","Weather","weatherList","city_name","list","undefined","map","weather","dt_txt","src","alt","main","description","Math","round","temp","feels_like","humidity","wind","speed","clouds","all","dt","defaultProps","axiosClient","axios","create","baseURL","process","headers","paramsSerializer","params","queryString","stringify","interceptors","request","use","a","config","response","data","error","WeatherApi","call5day3hour","get","App","setWeatherList","query","setQuery","useEffect","mode","appid","formatWeatherList","console","log","fetchWeatherList","format","city","name","country","slice","query_string","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.936694af.chunk.js","sourcesContent":["import React, { useRef, useState } from 'react'\nimport PropTypes from 'prop-types'\nimport '../../scss/search.scss'\n\nconst Search = props => {\n    const { onSubmit } = props\n    const typingTimeoutRef = useRef(null)\n    const [q, setQ] = useState('')\n\n    const handleChange = (event) => {\n        let value = event.target.value\n        setQ(value)\n\n        if (typingTimeoutRef.current) {\n            clearTimeout(typingTimeoutRef.current)\n        }\n\n        typingTimeoutRef.current = setTimeout(() => {\n            onSubmit(value)\n        }, 300);\n\n    }\n    return (\n        <div className=\"form__location\">\n            <input\n                type=\"search\"\n                value={q}\n                onChange={handleChange}\n                placeholder=\"Search by city name ...\" />\n        </div>\n    )\n}\n\nSearch.propTypes = {\n    onSubmit: PropTypes.func.isRequired,\n}\n\nexport default Search\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport '../../scss/weather.scss'\n\nconst Weather = props => {\n    const { weatherList } = props\n    const { city_name, list } = weatherList\n    return (\n        <div className=\"weather__content\">\n            {\n                list === undefined ? \"\" : list.map(weather => (\n                    <div key={weather.dt} className=\"weather__item\">\n                        <div className=\"date\">\n                            <h3>{`${weather.dt_txt} in ${city_name}`}</h3>\n                        </div>\n                        <div className=\"row\">\n                            <div className=\"col\">\n                                <img src=\"img/sun.svg\" alt=\"\" />\n                                <p>Weather</p>\n                            </div>\n                            <div className=\"col\">\n                                <p>{`${weather.weather[0].main}, ${weather.weather[0].description}`}</p>\n                            </div>\n                        </div>\n\n                        <div className=\"row\">\n                            <div className=\"col\">\n                                <img src=\"img/temp.svg\" alt=\"\" />\n                                <p>Temp</p>\n\n                            </div>\n                            <div className=\"col\">\n                                <p>{Math.round(weather.main.temp - 273.15)}</p>\n                                <p> &ordm;C</p>\n                            </div>\n                        </div>\n\n                        <div className=\"row\">\n                            <div className=\"col\">\n                                <img src=\"img/feels-like.svg\" alt=\"\" />\n                                <p>Feels Like</p>\n\n                            </div>\n                            <div className=\"col\">\n                                <p>{Math.round(weather.main.feels_like - 273.15)}</p>\n                                <p> &ordm;C</p>\n                            </div>\n                        </div>\n                        <div className=\"row\">\n                            <div className=\"col\">\n                                <img src=\"img/humidity.svg\" alt=\"\" />\n                                <p>Humidity</p>\n\n                            </div>\n                            <div className=\"col\">\n                                <p>{weather.main.humidity}</p>\n                                <p>%</p>\n\n                            </div>\n                        </div>\n\n                        <div className=\"row\">\n                            <div className=\"col\">\n                                <img src=\"img/wind.svg\" alt=\"\" />\n                                <p>Wind Speed</p>\n\n                            </div>\n                            <div className=\"col\">\n                                <p>{weather.wind.speed}</p>\n                                <p>m/s</p>\n                            </div>\n                        </div>\n\n                        <div className=\"row\">\n                            <div className=\"col\">\n                                <img src=\"img/clouds.svg\" alt=\"\" />\n                                <p>Clouds</p>\n\n                            </div>\n                            <div className=\"col\">\n                                <p>{weather.clouds.all}</p>\n                                <p>%</p>\n                            </div>\n                        </div>\n                    </div>\n                ))\n            }\n        </div>\n    )\n}\n\nWeather.propTypes = {\n    weatherList: PropTypes.object,\n}\nWeather.defaultProps = {\n    weatherList: {\n        city_name: '',\n        list: []\n    }\n}\n\nexport default Weather\n","import axios from 'axios';\nimport queryString from 'query-string';\n\n// Set up default config for http requests here\n// Please have a look at here `https://github.com/axios/axios#request- config` for the full list of configs\nconst axiosClient = axios.create({\n    baseURL: process.env.REACT_APP_API_URL,\n    headers: {\n        'content-type': 'application/json',\n    },\n    paramsSerializer: params => queryString.stringify(params),\n});\n\naxiosClient.interceptors.request.use(async (config) => {\n    // Handle token here ...\n    return config;\n});\n\naxiosClient.interceptors.response.use((response) => {\n    if (response && response.data) {\n        return response.data;\n    }\n\n    return response;\n}, (error) => {\n    // Handle errors\n    throw error;\n});\n\nexport default axiosClient;","import axiosClient from \"./axiosClient\"\n\nconst WeatherApi = {\n    call5day3hour: (params) => {\n        const url = '/forecast'\n        return axiosClient.get(url, { params })\n    }\n}\n\nexport default WeatherApi","\nimport './scss/App.scss';\nimport Search from './components/Search';\nimport Weather from './components/Weather';\nimport { useEffect, useState } from 'react';\nimport WeatherApi from './api/weatherApi';\n\nfunction App() {\n    const [weatherList, setWeatherList] = useState({})\n    const [query, setQuery] = useState('')\n\n    useEffect(() => {\n        const fetchWeatherList = async () => {\n            try {\n                const params = {\n                    q: query,\n                    mode: 'json',\n                    appid: process.env.REACT_APP_API_KEY\n                }\n                const response = await WeatherApi.call5day3hour(params)\n                formatWeatherList(response)\n\n            } catch (error) {\n                setWeatherList({})\n                console.log(error);\n            }\n        }\n        fetchWeatherList()\n    }, [query])\n\n    const formatWeatherList = (weatherList) => {\n        const format = {\n            city_name: `${weatherList.city.name}, ${weatherList.city.country}`,\n            list: weatherList.list.slice(0, 6)\n        }\n        setWeatherList(format)\n    }\n\n    const handleSubmit = (query_string) => {\n        setQuery(query_string)\n    }\n    return (\n        <div className=\"container\">\n            <Search onSubmit={handleSubmit} />\n            <Weather weatherList={weatherList} />\n        </div>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}